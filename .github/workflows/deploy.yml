name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run security tests
        run: |
          PYTHONPATH=. python tests/test_admin_security.py
          PYTHONPATH=. python tests/test_admin_py_security.py
          
      - name: Validate environment configuration
        run: |
          python env_validator.py
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
          SMTP_SERVER: smtp.gmail.com
          SMTP_PORT: 587
          SMTP_USERNAME: test@example.com
          SMTP_PASSWORD: testpassword

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/logicandstories:latest
            ${{ secrets.REGISTRY_URL }}/logicandstories:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ secrets.REGISTRY_URL }}/logicandstories:latest
            
            # Stop and remove old container
            docker stop logicandstories || true
            docker rm logicandstories || true
            
            # Run new container
            docker run -d \
              --name logicandstories \
              --restart unless-stopped \
              -p 80:5000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e SMTP_SERVER="${{ secrets.SMTP_SERVER }}" \
              -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
              -e SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}" \
              -e SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
              -e SENDER_EMAIL="${{ secrets.SENDER_EMAIL }}" \
              -e FRONTEND_BASE_URL="${{ secrets.FRONTEND_BASE_URL }}" \
              -e ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
              ${{ secrets.REGISTRY_URL }}/logicandstories:latest
            
            # Clean up old images
            docker image prune -af --filter "until=24h"
            
      - name: Health check
        run: |
          sleep 30  # Wait for container to start
          curl -f ${{ secrets.FRONTEND_BASE_URL }}/health || exit 1